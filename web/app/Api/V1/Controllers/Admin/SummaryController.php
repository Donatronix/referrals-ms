<?php

    namespace App\Api\V1\Controllers\Admin;

    use App\Api\V1\Controllers\Controller;
    use App\Models\ReferralCode;
    use App\Models\Total;
    use App\Models\User;
    use Illuminate\Database\Eloquent\Builder;
    use Illuminate\Database\Eloquent\Collection;
    use Illuminate\Http\Request;
    use Illuminate\Support\Facades\DB;
    use Throwable;

    /**
     * Referral code Controller
     *
     * @package App\Api\V1\Controllers\Application
     */
    class SummaryController extends Controller
    {
        /**
         * @var Builder[]|Collection|\Illuminate\Support\Collection
         */
        private \Illuminate\Support\Collection|array|Collection $rankings;

        /**
         *Initialise rankings
         */
        public function __construct()
        {
            $this->rankings = $this->getRankings();
        }

        /**
         * Get referral and codes summary listing
         *
         * @OA\Get(
         *     path="/summary-listing",
         *     description="Get referral programm summary listing",
         *     tags={"Admin | Summary"},
         *
         *     security={{
         *         "bearerAuth": {},
         *         "apiKey": {}
         *     }},
         *
         *     @OA\Response(
         *         response="200",
         *         description="TOP 1000 of leaders in the invitation referrals",
         *
         *         @OA\JsonContent(
         *             @OA\Property(
         *                 property="data",
         *                 type="object",
         *                 @OA\Property(
         *                     property="name",
         *                     type="string",
         *                     description="user name",
         *                     example=10,
         *                 ),
         *                 @OA\Property(
         *                     property="country",
         *                     type="string",
         *                     description="user country",
         *                     example=10,
         *                 ),
         *                 @OA\Property(
         *                     property="totalReferrals",
         *                     type="integer",
         *                     description="Total referrals by user",
         *                     example=10,
         *                 ),
         *                 @OA\Property(
         *                     property="totalCodesGenerated",
         *                     type="integer",
         *                     description="Total codes generated by user",
         *                     example=10,
         *                 ),
         *                 @OA\Property(
         *                     property="topReferralBonus",
         *                     type="integer",
         *                     description="Top referral bonus",
         *                     example=645000,
         *                 ),
         *                 @OA\Property(
         *                      property="amountEarned",
         *                      type="integer",
         *                      description="Amount earned by user",
         *                      example=450000,
         *                 ),
         *                 @OA\Property(
         *                      property="rank",
         *                      type="integer",
         *                      description="Rank of user",
         *                      example=450000,
         *                 ),
         *             ),
         *         ),
         *     ),
         *     @OA\Response(
         *         response="401",
         *         description="Unauthorized"
         *     ),
         *     @OA\Response(
         *         response=400,
         *         description="Invalid request"
         *     ),
         *     @OA\Response(
         *         response="404",
         *         description="User not found",
         *     ),
         *     @OA\Response(
         *         response="500",
         *         description="Unknown error"
         *     )
         * )
         *
         * @param Request $request
         *
         * @return mixed
         */
        public function listing(Request $request): mixed
        {
            try {

                $referrers = User::whereNotNull('referrer_id')->distinct('referrer_id')->select('referrer_id')->get();

                $retVal = $referrers->map(function ($referrer) {
                    $user = User::query()->where('id', $referrer->referrer_id)->first();

                    return [
                        'name' => $user->name,
                        'country' => $user->country,
                        'totalReferrals' => User::query()->where('referrer_id', $referrer->referrer_id)->count(),
                        'totalCodesGenerated' => ReferralCode::query()->where('user_id', $referrer->referrer_id)->count(),
                        'amountEarned' => Total::query()->where('user_id', $referrer->referrer_id)->sum('reward'),
                        'topReferralBonus' => $this->topReferralBonus(),
                        'rank' => $this->rankings->first(function ($value, $key) use ($user) {
                            return $value['user_id'] === $user->id;
                        }),
                    ];
                });

                $summary = collect($retVal)->sortByDesc('rank')
                    ->values()->map(function ($item, $key) {
                        return $item;
                    });

                $summary = collect($summary)->paginate(request()->get('limit', config('settings.pagination_limit')));

                return response()->jsonApi([
                    'title' => "List referral and codes summary",
                    'message' => 'Referral and codes summary successfully received',
                    'data' => $summary,
                ]);
            } catch (Throwable $e) {
                return response()->jsonApi([
                    'title' => "Not received list",
                    'message' => $e->getMessage(),
                ], 404);
            }
        }

        /**
         * @return mixed
         */
        protected function topReferralBonus(): mixed
        {
            return $this->rankings->first()['reward'];
        }

        /**
         * @return \Illuminate\Support\Collection
         */
        protected function getRankings(): \Illuminate\Support\Collection
        {
            $users = DB::table('totals')->distinct('user_id')->get('user_id');
            $retVal = $users->map(function ($item) {
                return [
                    'user_id' => $item->user_id,
                    'reward' => Total::query()->where('user_id', $item->user_id)->sum('reward'),
                ];
            });

            return collect($retVal)
                ->sortByDesc('reward')
                ->values()
                ->map(function ($item, $key) {
                    return [
                        'user_id' => $item['user_id'],
                        'rank' => $key + 1,
                        'reward' => $item['reward'],
                    ];
                });
        }
    }
